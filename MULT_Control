`timescale 1ns / 1ps

module MULT_CONTROL #(
    parameter N = 64,
    parameter DATA_WIDTH = 16
)(
    input wire clk,
    input wire rst,
    input wire valid_in,

    output reg [31:0] coeff_data,    // Packed {imag, real}
    output reg valid_out             // High for 1 clk on valid output
);

    // Memories for coefficients
    reg [DATA_WIDTH-1:0] filter_real [0:N-1];
    reg [DATA_WIDTH-1:0] filter_imag [0:N-1];

    // Pointer to loop through data
    reg [5:0] read_index;

    // Load filter data
    initial begin
        $readmemh("filter_real.txt", filter_real);
        $readmemh("filter_imag.txt", filter_imag);
    end

    // Main logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            read_index <= 0;
            coeff_data <= 32'd0;
            valid_out <= 0;
        end else begin
            if (valid_in) begin
                coeff_data <= {filter_imag[read_index], filter_real[read_index]};
                valid_out <= 1;

                if (read_index == N-1)
                    read_index <= 0;
                else
                    read_index <= read_index + 1;
            end else begin
                valid_out <= 0;
            end
        end
    end

endmodule
