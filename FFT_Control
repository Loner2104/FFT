module FFT_CONTROL #(
    parameter L = 200,
    parameter M = 40,
    parameter N = 64,
    parameter OVERLAP = M - 1,
    parameter VALID_DATA = N - OVERLAP,
    parameter PAD_START = OVERLAP,
    parameter PAD_END = 17,
    parameter TOTAL_LEN = L + PAD_START + PAD_END,
    parameter DATA_WIDTH = 16
)(
    input wire clk,
    input wire rst,
    input wire start,

    output reg [31:0] s_axis_data_tdata,
    output reg s_axis_data_tvalid,
    output reg s_axis_data_tlast,
    input  wire s_axis_data_tready,

    output reg [31:0] clock_counter,
    output reg [7:0] block_counter
);

    // Memory to store the original data
    reg [DATA_WIDTH-1:0] rx_real_mem [0:L-1];
    reg [DATA_WIDTH-1:0] rx_imag_mem [0:L-1];

    // State machine
    localparam IDLE = 0,
               STREAM = 1,
               DONE = 2;

    reg [1:0] state;
    reg [8:0] global_index;       // 0 to 63 within a block
    reg [8:0] block_start_index;  // Index in padded stream

    // Internal sample handling
    reg [8:0] sample_addr;
    reg [8:0] mem_index;
    reg [15:0] real_sample, imag_sample;

    
    initial begin
        $readmemh("rx_real.txt", rx_real_mem);
        $readmemh("rx_imag.txt", rx_imag_mem);
    end

    
    always @(posedge clk or posedge rst) begin
        if (rst)
            clock_counter <= 0;
        else
            clock_counter <= clock_counter + 1;
    end

    // Main state machine
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            s_axis_data_tdata <= 0;
            s_axis_data_tvalid <= 0;
            s_axis_data_tlast <= 0;
            global_index <= 0;
            block_start_index <= 0;
            block_counter <= 0;
        end else begin
            case (state)
                IDLE: begin
                    s_axis_data_tvalid <= 0;
                    s_axis_data_tlast <= 0;
                    if (start) begin
                        state <= STREAM;
                        global_index <= 0;
                        block_start_index <= 0;
                        block_counter <= 0;
                    end
                end

                STREAM: begin
                    if (s_axis_data_tready) begin
                        sample_addr = block_start_index + global_index;

                        if (sample_addr < PAD_START || sample_addr >= PAD_START + L) begin
                            real_sample = 16'd0;
                            imag_sample = 16'd0;
                        end else begin
                            mem_index = sample_addr - PAD_START;
                            real_sample = rx_real_mem[mem_index];
                            imag_sample = rx_imag_mem[mem_index];
                        end

                        s_axis_data_tdata <= {imag_sample, real_sample};
                        s_axis_data_tvalid <= 1;
                        s_axis_data_tlast <= (global_index == N - 1);

                        if (global_index == N - 1) begin
                            global_index <= 0;
                            block_start_index <= block_start_index + VALID_DATA;
                            block_counter <= block_counter + 1;

                            if (block_start_index + VALID_DATA + OVERLAP >= TOTAL_LEN) begin
                                state <= DONE;
                            end
                        end else begin
                            global_index <= global_index + 1;
                        end
                    end else begin
                        s_axis_data_tvalid <= 0;
                        s_axis_data_tlast <= 0;
                    end
                end

                DONE: begin
                    s_axis_data_tvalid <= 0;
                    s_axis_data_tlast <= 0;
                    if (!start)
                        state <= IDLE;
                end

                default: begin
                    state <= IDLE;
                end
            endcase
        end
    end

endmodule
